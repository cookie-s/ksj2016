main.c, Makefile という2個のファイルを置いた。以下にそれぞれ内容を示す。

``` main.c
#include <assert.h>
#include <stdio.h>

typedef struct myuint128 {
    unsigned long digit0;
    unsigned long digit1;
} myuint128_t;

myuint128_t add128(myuint128_t a, myuint128_t b) {
    myuint128_t res;
    __asm__ (
            "addc %0, %2, %3\n\t" // 加算して、carryも書き換える
            "adde %1, %4, %5\n\t" // carryを考慮しながら加算
            : "=r"(res.digit0), "=r"(res.digit1)  // ともに書き込み専用。addc,addeはオペランドにレジスタしか許さない。
            : "r"(a.digit0), "r"(b.digit0), "r"(a.digit1), "r"(b.digit1) // すべて読み込み専用。レジスタ制約をつける。
            : "ca" // addcによってcaは書き換わる。
            );
    return res;
}

int eq128(myuint128_t a, myuint128_t b) {
    return (a.digit0 == b.digit0) && (a.digit1 == b.digit1);
}

int main(void) {
    assert( eq128(
                add128( (myuint128_t){0xA05F44019BD79748UL, 0x0000000000003995UL}, (myuint128_t){0x7B6F88EC052868B8UL, 0x0000000000009A2CUL}),
                (myuint128_t){0x1BCECCEDA1000000UL, 0x000000000000D3C2UL}
                ));
    assert( eq128(
                add128((myuint128_t){0xBEAED78ACDC6F714UL, 0x1934D10F478850D4UL}, (myuint128_t){0xE69D35AFE6995719UL, 0x0805961D75476A77UL}),
                (myuint128_t){0xA54C0D3AB4604E2DUL, 0x213A672CBCCFBB4CUL}
                ));
    assert( eq128(
                add128((myuint128_t){0xD97482C3148C06ADUL, 0x81981582D4ED6486UL}, (myuint128_t){0xEFBBAA3E5DD5089FUL, 0x8FE78CB9DAD947E9UL}),
                (myuint128_t){0xC9302D0172610F4CUL, 0x117FA23CAFC6AC70UL}
                ));
    printf("you passed all tests.\n");
    return 0;
}

```

``` Makefile
.PHONY: all

all: main

main: main.c
	gcc main.c -o main


```

addc, addeだけを使えば良い。
powerpcの場合、拡張アセンブリの制約はほとんどregister制約でいいだろう。
アセンブラテンプレートの中の数字の振り方を間違えるとつらい。


これらのファイルをアーカイブ化して圧縮、base64化したものが以下。
base64 -d | tar zxに標準入力から以下を与えることで解凍される。

H4sIALj4UlgAA+2XW2/jRBTH84o/xSioq0QK6Yw99tgtRbLHtnhYLi/7gFQpch23WNsmxXbQVqtK
tbNIXRa0AoEQ7AsSCJUCCwiEdiXEfphRLx+DceykuZXtA2G1y/yU+DLjc87/zBlnJgihjeXKYoEc
oqr5GREVjp+HVJACZaxqSEZaBSKkEFwB6oJ1DejFiRcBUPG73ZthEF/63NP6n1NQXv8dL+w0/YXF
yAusYXxZ/RVZ0abqL2MCKwAuTNEY//P6vxx2/O1eOwCvenEcREnz3deki7Y4aYfdvElK9naDdrAJ
4iTq+QnY2euFnQTJOrgtAU6vE4dbnaANtrudLdAOt8IErl7Wg1al/QsPrWRVksbugNdu84vaRFNj
/HmwUS/DjjdGQVxEbLW8eKfVArXB3ZAqd+uDJdgASzL/Kuud9aQKlpfByYdfnz38gqX88x07SH0v
ivZYlp0+eMTSj0/vP2DpIcvuzfgKwBLifjD/qiNfpfGn5wf90w8eDnwes/Qjlt0tokx4WQHVtaha
47qbxYDVG1MtqA5yryw94oJY+kOh6fyvP1n65OSX7OyzI3aQ5Xk1ckEs/Zllx6z/Fet/z/q/sf5d
bsL6P7LsEcses+zJQM+986NfWfr5QNgdbj4ticf3xvTw243JW2+obaKXSx0o/ZKlj/lAnh//xDVO
KR3XcnL4x9nvd/hQsfRbln7CR3iOFt8bjGqeYZ5KdsjSb7hz3+OpXtQnuz/Hul7MhShIelGnmBv7
ksQnCwjeu+rsKo1H4wHW1sBoMMC1a6MeNNaD6qNI+c9q7f1u2B46LF6xWilhQu+gu5j4YFxc/Ta8
ZULVxRgiw7KJQbB+43oDwFtjqydUDEO9cX2/MWNKLM3VdYdCVdY13Zpjapgy5ab1xoycaV/Iog6l
jm2iwnLWl61Qmfua8VQvq3G1/KfjWo7p2EQ3qU01lyBcxEWGgm0EXUx0XYU2npu+oxm2opouPxsq
QUYpWYeqoSGbqJhoJiFXS99UMeUZmhbWIHZku/AlI8XUiEwtSl3LwvTfT9/OSy5TBWGdQs0s4+rI
0JGqyzZ2bA3r2vz0uSTTVBzVtlWoG25p6jpEp5Zhm7aBiWNcLX1q8BXa5gu3rOWjTssqIOKaskJN
l2omJfCf0t+NuL/NWnWv2wO7+Vi0gbe9DZIgTuLmeqc6+crC/DV61qvji89g//eGdzPYDLeDBcV4
yv6P/zmQh/s/qBCF7/8UyLeEYv/3H9B8+/W33nxnJX8TJYkfVgarFt+Q8WNx3fSll7Z8v7wGr3TL
J561coFAIBAIBAKBQCAQCAQCgUAgEAgEAsE8/gZQYKDVACgAAA==
