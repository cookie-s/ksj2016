(define (mygcd a b)
  (if (zero? a) b
    (if (> a b) (mygcd b a)
      (mygcd (modulo b a) a))))

(define (rational a b)
  (let ((g (mygcd a b)))
    (cons (/ a g) (/ b g) )))

(define rat-num car)
(define rat-denom cdr)
(define rat-= equal?)
(define rat-0 (rational 0 1))
(define (rat-+ r1 r2)
  (rational (+ (* (rat-num r1) (rat-denom r2)) (* (rat-denom r1) (rat-num r2)))
            (* (rat-denom r1) (rat-denom r2))))
(define (rat-- r) (rational (* -1 (rat-num r)) (rat-denom r)))
(define rat-1 (rational 1 1))
(define (rat-* r1 r2) (rational (* (rat-num r1) (rat-num r2)) (* (rat-denom r1) (rat-denom r2))))
(define (rat-/ r) (rational (rat-denom r) (rat-num r)))
