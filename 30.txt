このレポート中では、「==」は、比較演算子というより、実際に等しいことを表す。
「=」はプログラミング的な代入を示す。

30分近くメモを取りながら考えて、pointer stewになる。（なった。）

1. **++xpp
 副作用は xpp = xpp+1 ( == xp+1 )。
 インクリメントは前置なので、**++xpp == **(xp+1) == *(xp[1]) == *(x+2) == x[2] == "point"
 よって "point" が出力される。

2. *--*++xpp+3
 C言語の演算子優先順位表を見たところ、前置インクリメントや前置"*"に比べて、二項演算子の加法"+"は低いらしい。
 評価は ++xpp から始まり、副作用 xpp = xpp+1 ( == xp+2 ) が起きる。
 *++xpp == *(xp+2) == xp[2] であり、前置デクリメントによって副作用 xp[2] = (x+1)-1 == x が起きる。
 評価を続けると、 *--*++xpp+3 == *--(xp[2])+3 == *x+3 == x[0]+3 == "enter"+3 == "er"
 よって "er" が出力される。

3. *xpp[-2]+3
 1,2でxppは副作用を受けて変わっていたことを思い出して、
 *xpp[-2]+3 == *(*(xp+2-2))+3 == **xp+3 == *xp[0]+3 == x[3]+3 == "first"+3 == "st"
 よって "st" が出力される。

4. *--xpp[-1]+1
 *--xpp[-1]+1 == *--(xp+2-1)+1 == *--xp[1]+1 == *(x+2-1)+1 == x[1]+1 == "new"+1 == "ew"
 途中で、副作用 xp[1] = x+2-1 == x+1 が起きている。
 よって "ew" が出力される。


以上より、pointer stewが出力されることになる。
