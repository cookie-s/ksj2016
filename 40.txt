1. (define a (+ (- (* (* 1 2) 3) (* 4 5)) (+ (* 6 7) (* 8 9))))
    rubyで同じようなものを探すと、（関数定義なので少し違うが）defというのがあって、defでメソッドfuncを定義すれば、シンボル:funcが帰る。
    同じようにとは行かないまでも、何か特殊な値をdefineも返すかと思ったが、
実際は何も返ってこなかった。defineは"special form"とgauche users' referenceには書いてあるし、関数ではない、特殊なものだから値を返さないのだろう。

2. f
    どちらかというと出力がどうされるかという話であって、値が違ったというのではないが、fを評価した時具体的にlambda (x) (+ x a))というような分かりやすい出力が得られるかと思ったが、実際は #<procedure f (x)> という中身の示されないものだった。内部で関数がどう管理されているのか知らないが、そうだった。

3. (h a b)
    hに連続的に引数が適用されて199が出力されるかと思ったが、実際はエラーが起きた。引数を二個取る関数とそれがカリー化されたような関数は全く別物として扱われるらしい。

4. (h a) ;;; lambda (a) (+ 100 a) #<procedure 10340b5c0 at <current input>:32:22 (a)>
    これも出力が期待と違ったという話だが、#<procedure 10340b5c0 at <current input>:32 22(a)> と出力された。atのあたりはどうでもいいとして、この出力から、部分適用された結果の新たな関数が、特に名前のない関数として作られたことが想像される。
